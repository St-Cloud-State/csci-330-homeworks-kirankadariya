Script started on 2025-01-27 21:46:19+00:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="127" LINES="10"]
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ script Q3and4
Script started, file is Q3and4
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* ;; Question 3 - Finding the sequence of CARs and CDRs
(setq list1 '(a b x d))          ; Define the first list
(setq list2 '(a (b (x d))))      ; Defi; in: SETQ LIST1
;     (SETQ LIST1 '(A B X D))
; 
; caught WARNING:
;   undefined variable: LIST1
; 
; compilation unit finished
;   Undefined variable:
;     LIST1
;   caught 1 WARNING condition

(A B X D)
* ne the second list
(setq list3 '(((a (b (x) d))))); in: SETQ LIST2
;     (SETQ LIST2 '(A (B (X D))))
; 
; caught WARNING:
;   undefined variable: LIST2
; 
; compilation unit finished
;   Undefined variable:
;     LIST2
;   caught 1 WARNING condition

(A (B (X D)))
*   ; Define the third list

;; Find 'x' in each cas; in: SETQ LIST3
;     (SETQ LIST3 '(((A #))))
; 
; caught WARNING:
;   undefined variable: LIST3
; 
; compilation unit finished
;   Undefined variable:
;     LIST3
;   caught 1 WARNING condition

(((A (B (X) D))))
* e
(print (caddr list1))            ; For list1
(pr
X 
X
* int (cadar list2))            ; For list2
(print (
debugger invoked on a TYPE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The value
    A
  is not of type
    LIST

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(CADAR (A (B (X D))))
0] caaadar list3))          ; For list3
; in: PRINT (CADAR LIST2)
;     (CAAADAR LIST3)
; 
; caught STYLE-WARNING:
;   undefined function: CAAADAR
; 
; caught WARNING:
;   undefined variable: LIST3
; 
; compilation unit finished
;   Undefined function:
;     CAAADAR
;   Undefined variable:
;     LIST3
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition

debugger invoked on a UNDEFINED-FUNCTION in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The function COMMON-LISP-USER::CAAADAR is undefined.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 1).
  1:         Exit debugger, returning to top level.

("undefined function" (((A (B (X) D)))))
0[2] ;; Define the lists
(setq list1 '(a b x d))          ;; List 1
(setq list2 '(a (b (x d))))      ;; L; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
; in: SETQ LIST1
;     (SETQ LIST1 '(A B X D))
; 
; caught WARNING:
;   undefined variable: LIST1
; 
; compilation unit finished
;   Undefined variable:
;     LIST1
;   caught 1 WARNING condition
(A B X D)
0[2] ist 2
(setq list3 '(((a (b (x) d)))))  ;; List 3

; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
; in: SETQ LIST2
;     (SETQ LIST2 '(A (B (X D))))
; 
; caught WARNING:
;   undefined variable: LIST2
; 
; compilation unit finished
;   Undefined variable:
;     LIST2
;   caught 1 WARNING condition
(A (B (X D)))
0[2] ; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
; in: SETQ LIST3
;     (SETQ LIST3 '(((A #))))
; 
; caught WARNING:
;   undefined variable: LIST3
; 
; compilation unit finished
;   Undefined variable:
;     LIST3
;   caught 1 WARNING condition
(((A (B (X) D))))
0[2] ;; Finding 'x' in each list
(format t "~%Finding 'x' in list1: ~A" (caddr list1))   ;; x is the third element
(format t "~%Finding 'x' in list2: ~A" (; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.

NILFinding 'x' in list1: X
0[2] cadar (cadr list2))) ;; x is within the second element
(format t "~%Finding 'x' in list3: ~A" (caada; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.

debugger invoked on a TYPE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The value
    B
  is not of type
    LIST

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 2).
  1:         Reduce debugger level (to debug level 1).
  2:         Exit debugger, returning to top level.

(CADAR (B (X D)))
0[3] r (cadar (car list3)))) ;; x is deeply nested
; in: FORMAT T
;     (CAR LIST3)
; 
; caught WARNING:
;   undefined variable: LIST3
; 
; compilation unit finished
;   Undefined variable:
;     LIST3
;   caught 1 WARNING condition

debugger invoked on a TYPE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The value
    B
  is not of type
    LIST

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 3).
  1:         Reduce debugger level (to debug level 2).
  2:         Reduce debugger level (to debug level 1).
  3:         Exit debugger, returning to top level.

((LAMBDA (#:G390)) #<unused argument>)
   source: (CAADAR (CADAR (CAR LIST3)))
0[4] ;; Question 4 - Constructing the lists
;; Constructing (a b x d)
(setq constructed1 (cons 'a (cons 'b (cons 'x (cons 'd nil)))))
(print constructed1)
; in: FORMAT T
;     (SETQ CONSTRUCTED1 (CONS 'A (CONS 'B (CONS 'X #))))
; 
; caught WARNING:
;   undefined variable: CONSTRUCTED1
; 
; compilation unit finished
;   Undefined variable:
;     CONSTRUCTED1
;   caught 1 WARNING condition
(A B X D)
0[4] ; in: FORMAT T
;     (PRINT CONSTRUCTED1)
; 
; caught WARNING:
;   undefined variable: CONSTRUCTED1
; 
; compilation unit finished
;   Undefined variable:
;     CONSTRUCTED1
;   caught 1 WARNING condition

(A B X D)(A B X D) 
0[4] 
;; Constructing (a (b (x d)))
(setq constructed2 (cons 'a (cons (cons 'b (cons (cons 'x (cons 'd nil)) nil)) nil)))
(print constructed2)

;; Construc; in: FORMAT T
;     (SETQ CONSTRUCTED2 (CONS 'A (CONS (CONS 'B #) NIL)))
; 
; caught WARNING:
;   undefined variable: CONSTRUCTED2
; 
; compilation unit finished
;   Undefined variable:
;     CONSTRUCTED2
;   caught 1 WARNING condition
(A (B (X D)))
0[4] ; in: FORMAT T
;     (PRINT CONSTRUCTED2)
; 
; caught WARNING:
;   undefined variable: CONSTRUCTED2
; 
; compilation unit finished
;   Undefined variable:
;     CONSTRUCTED2
;   caught 1 WARNING condition

(A (B (X D)))(A (B (X D))) 
0[4] ting (((a (b (x) d))))
(setq constructed3 (cons (cons (cons 'a (cons (cons 'b (cons (cons 'x nil) (cons 'd nil))) nil)) nil) nil))
(print constructed3; in: FORMAT T
;     (SETQ CONSTRUCTED3 (CONS (CONS (CONS 'A #) NIL) NIL))
; 
; caught WARNING:
;   undefined variable: CONSTRUCTED3
; 
; compilation unit finished
;   Undefined variable:
;     CONSTRUCTED3
;   caught 1 WARNING condition
(((A (B (X) D))))
0[4] )
; in: FORMAT T
;     (PRINT CONSTRUCTED3)
; 
; caught WARNING:
;   undefined variable: CONSTRUCTED3
; 
; compilation unit finished
;   Undefined variable:
;     CONSTRUCTED3
;   caught 1 WARNING condition

(((A (B (X) D))))(((A (B (X) D)))) 
0[4] (quit)
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ git [K[K[K[Kgit add .
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ git add Q3and4 [K[KQ[K[K[K[K[K[K[K[K[K[K[K[K[K[Kscript Q#and[K[K[K[KandQ4[K[K[K[K[K3nad[K[K[KandQ4
Script started, file is Q3andQ4
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (setq my-list '(a b x d))     ; Define the list
(c; in: SETQ MY-LIST
;     (SETQ MY-LIST '(A B X D))
; 
; caught WARNING:
;   undefined variable: MY-LIST
; 
; compilation unit finished
;   Undefined variable:
;     MY-LIST
;   caught 1 WARNING condition

(A B X D)
* adadr my-list)              ; Get x using the sequence

debugger invoked on a TYPE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The value
    B
  is not of type
    LIST

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(CADADR (A B X D))
0] (setq my-list '(a (b (x d)))) ; Define the list
(c; in: CADADR MY-LIST
;     (SETQ MY-LIST '(A (B (X D))))
; 
; caught WARNING:
;   undefined variable: MY-LIST
; 
; compilation unit finished
;   Undefined variable:
;     MY-LIST
;   caught 1 WARNING condition
(A (B (X D)))
0] adar my-list)               ; Get x using the sequence
; in: CADADR MY-LIST
;     (CADAR MY-LIST)
; --> CAR CDR 
; ==>
;   (CAR MY-LIST)
; 
; caught WARNING:
;   undefined variable: MY-LIST
; 
; compilation unit finished
;   Undefined variable:
;     MY-LIST
;   caught 1 WARNING condition

debugger invoked on a TYPE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The value
    A
  is not of type
    LIST

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 1).
  1:         Exit debugger, returning to top level.

((LAMBDA (#:G390)) #<unused argument>)
   source: (CADAR MY-LIST)
0[2] (setq my-list '(((a (b (x) d))))) ; Define the list
(caaadar my-list)                 ; Get x using ; in: CADADR MY-LIST
;     (SETQ MY-LIST '(((A #))))
; 
; caught WARNING:
;   undefined variable: MY-LIST
; 
; compilation unit finished
;   Undefined variable:
;     MY-LIST
;   caught 1 WARNING condition
(((A (B (X) D))))
0[2] the sequence
; in: CADADR MY-LIST
;     (CAAADAR MY-LIST)
; 
; caught STYLE-WARNING:
;   undefined function: CAAADAR
; 
; caught WARNING:
;   undefined variable: MY-LIST
; 
; compilation unit finished
;   Undefined function:
;     CAAADAR
;   Undefined variable:
;     MY-LIST
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition

debugger invoked on a UNDEFINED-FUNCTION in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The function COMMON-LISP-USER::CAAADAR is undefined.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 2).
  1:         Reduce debugger level (to debug level 1).
  2:         Exit debugger, returning to top level.

("undefined function" (((A (B (X) D)))))
0[3] (setq list1 (cons 'a (cons 'b (cons 'x (cons 'd nil))))) ; Create the list
(print list1)
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
; in: SETQ LIST1
;     (SETQ LIST1 (CONS 'A (CONS 'B (CONS 'X #))))
; 
; caught WARNING:
;   undefined variable: LIST1
; 
; compilation unit finished
;   Undefined variable:
;     LIST1
;   caught 1 WARNING condition
(A B X D)
0[3] ; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.

(A B X D)(A B X D) 
0[3] (setq list2 (cons 'a (cons (cons 'b (cons (cons 'x (cons 'd nil)) nil)) nil))) ; Create the list
(pr; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
; in: SETQ LIST2
;     (SETQ LIST2 (CONS 'A (CONS (CONS 'B #) NIL)))
; 
; caught WARNING:
;   undefined variable: LIST2
; 
; compilation unit finished
;   Undefined variable:
;     LIST2
;   caught 1 WARNING condition
(A (B (X D)))
0[3] int list2)
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.

(A (B (X D)))(A (B (X D))) 
0[3] (setq list3 (cons (cons (cons 'a (cons (cons 'b (cons (cons 'x nil) (cons 'd nil))) nil)) nil) nil))) ; Create the list
(print list3)
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.
; in: SETQ LIST3
;     (SETQ LIST3 (CONS (CONS (CONS 'A #) NIL) NIL))
; 
; caught WARNING:
;   undefined variable: LIST3
; 
; compilation unit finished
;   Undefined variable:
;     LIST3
;   caught 1 WARNING condition
(((A (B (X) D))))
0[3] ; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.

(((A (B (X) D))))(((A (B (X) D)))) 
0[3] quit
; No debug variables for current frame: using EVAL instead of EVAL-IN-FRAME.

debugger invoked on a UNBOUND-VARIABLE in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The variable QUIT is unbound.

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Reduce debugger level (to debug level 3).
  1:         Reduce debugger level (to debug level 2).
  2:         Reduce debugger level (to debug level 1).
  3:         Exit debugger, returning to top level.

(SB-INT:SIMPLE-EVAL-IN-LEXENV QUIT #<NULL-LEXENV>)
0[4] (quit)
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ Sc[K[Kscriptss[K[K[Kt Q3andQ4
Script started, file is Q3andQ4
[0;32m@kirankadariya [0mâžœ [1;34m/workspaces/csci-330-homeworks-kirankadariya/Hwork1 [0;36m([1;31mmain[0;36m) [0m$ sbcl[K[K[K[Ksn[Kbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* ;; Question 3 - Finding the sequence of CARs and CDRs
(setq list1 '(a b x d))          ; Define the first list
(setq list2 '(a (b (x d))))      ; Defi; in: SETQ LIST1
;     (SETQ LIST1 '(A B X D))
; 
; caught WARNING:
;   undefined variable: LIST1
; 
; compilation unit finished
;   Undefined variable:
;     LIST1
;   caught 1 WARNING condition

(A B X D)
* ne the second list
(setq list3 '(((a (b (x) d))))); in: SETQ LIST2
;     (SETQ LIST2 '(A (B (X D))))
; 
; caught WARNING:
;   undefined variable: LIST2
; 
; compilation unit finished
;   Undefined variable:
;     LIST2
;   caught 1 WARNING condition

(A (B (X D)))
*   ; Define the third list

;; Find 'x' in each cas; in: SETQ LIST3
;     (SETQ LIST3 '(((A #))))
; 
; caught WARNING:
;   undefined variable: LIST3
; 
; compilation unit finished
;   Undefined variable:
;     LIST3
;   caught 1 WARNING condition

(((A (B (X) D))))
* e
(print (caddr list1))            ; For list1
(pr
X 
X
* int (cadar list2))            ; For list2
(print (
debugger invoked on a TYPE-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  The value
    A
  is not of type
    LIST

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(CADAR (A (B (X D))))
0] caaadar list3))          ; For list3
; in: PRINT (CADAR LIST2)
;     (CAAADAR LIST3)
; 
; caught STYLE-WARNING:
;   undefined function: CAAADAR
; 
; caught WARNING:
;   undefined variable: LIST